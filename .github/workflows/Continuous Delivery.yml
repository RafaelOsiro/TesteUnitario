name: cd

on:
  push:
    branches:
      - main

jobs:
  build_with_signing:

    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Archive app
        run: |
          SCHEMES_LIST=$(xcodebuild -list -json | tr -d "\n")
          DEFAULT=$(echo $SCHEMES_LIST | jq -r '.project.schemes[0]')
          ARCHIVE_NAME=app
          set -o pipefail && xcodebuild archive \
            -scheme $DEFAULT \
            -archivePath ${ARCHIVE_NAME}.xcarchive
      - name: Export Archive
        run: |
          set -o pipefail && xcodebuild -exportArchive \
            -archivePath app.xcarchive \
            -exportPath Release/ \
            -exportOptionsPlist export.plist | xcpretty
      - uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: Release/  # or path/to/artifact
  
  upload_app:
    runs-on: macos-latest
    needs: build_with_signing

    steps:
      - name: Download app-artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact
      - name: upload app
        env:
          API_APP_STORE_ID_KEY: ${{ secrets.API_APP_STORE_ID_KEY }}
          API_APP_STORE_ISSUER_ID: ${{ secrets.API_APP_STORE_ISSUER_ID }}
          API_APP_STORE_KEY_BASE64: ${{ secrets.API_APP_STORE_KEY_BASE64 }}
        run: |
          # create key
          API_KEY_PATH="${RUNNER_TEMP}/AuthKey_${API_APP_STORE_ID_KEY}.p8"
          
          # import da cheve pro arquivo
          echo -n "$API_APP_STORE_KEY_BASE64" | base64 --decode --output "$API_KEY_PATH"
          
          # export do novo path da api
          export API_PRIVATE_KEYS_DIR="${RUNNER_TEMP}"
          
          # validate
          set -o pipefail && xcrun altool --validate-app \
             -f TesteUnitario.ipa\
             --type ios \
             --apiKey "$API_APP_STORE_ID_KEY"  \
             --apiIssuer "$API_APP_STORE_ISSUER_ID" | xcpretty
           
           # upload app
           set -o pipefail && xcrun altool --upload-app \
             -f TesteUnitario.ipa\
             --type ios \
             --apiKey "$API_APP_STORE_ID_KEY"  \
             --apiIssuer "$API_APP_STORE_ISSUER_ID" | xcpretty
